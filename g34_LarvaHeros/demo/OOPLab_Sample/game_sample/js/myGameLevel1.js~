var MyGame = Framework.Class(Framework.Level , {
    
    initializeProgressResource: function() {
        this.loading = new Framework.Sprite(define.imagePath + 'loading.jpg');
        this.loading.position = {x: Framework.Game.getCanvasWidth() / 2 , y: Framework.Game.getCanvasHeight() / 2};

        //為了或得到this.loading這個Sprite的絕對位置, 故需要先計算一次(在Game Loop執行時, 則會自動計算, 但因為loadingProgress只支援draw故需要自行計算)                  
    },

    //在initialize時會觸發的事件
    loadingProgress: function(ctx, requestInfo) {
        //console.log(Framework.ResourceManager.getFinishedRequestPercent())
        this.loading.draw(ctx);
        ctx.font ='90px Arial';
        ctx.textAlign = 'center';
        ctx.fillStyle = 'white';
        ctx.fillText(Math.round(requestInfo.percent) + '%' , ctx.canvas.width / 2 , ctx.canvas.height / 2 + 300);
    },

    load: function () {  
        this.deadtime = 0;

    //var playername = prompt("Your name : ");

    this.gameMap = new GameMap();
    this.gameMap.load(define.imagePath + 'episode_1.jpg');
	this.gameMap.position = {
		x: 1500,
		y: 450
	}
    this.rootScene.attach(this.gameMap.map);

    this.bar = new Framework.Sprite(define.imagePath + 'ui_bar.png');
    this.bar.position = {
        x: 800,
        y: 900 - 110
    }
    this.rootScene.attach(this.bar);
    
    this.practicebar = new Framework.Sprite(define.imagePath + 'gauge_larva_bg.png');
    this.practicebar.position = {
        x: 250,
        y: 70
    }
    this.rootScene.attach(this.practicebar);
	
    this.enemycamp = new Camp('enemy_gate_01.png');
	this.enemycamp.load();
	this.enemycamp.position = {
		x: 1000,
		y: 500
	}
	this.rootScene.attach(this.enemycamp.building);

    this.bread = new Array();
    for(var k = 0; k <= 1000; k++){
        this.bread[k] = new Falling('unit_gauge.png');
        this.bread[k].load();    
    }
    this.breadNum = -1;
    this.newbread = 0;
    this.breadspeed = 2;
    this.breadup = 200;
    this.breadFirst = 0;
    this.breadgone = 900;

    this.mycamp = new Camp('home_01.png');
    this.mycamp.load();
    this.mycamp.building.position = {
        x: 300,
        y: 400
    }
	this.rootScene.attach(this.mycamp.building);

	
	this.enemy1 = new Array();
    for(var k = 0; k <= 100; k++){
        this.enemy1[k] = new Enemy('enemy/mira_red.png', 1);
        this.enemy1[k].load(this.gameMap.position.x + 1500, 'gray.png');
    }
    this.enemyNum = -1;
    this.newenemy = -1;
    this.enemyspeed = 1;//1
    this.enemyFirst = 0;
    this.enemyup = 600;
	
	
    this.army1 = new Array();
    for(var i = 0; i <= 1000; i++){
        this.army1[i] = new Army('army/baby_beetle.png', 'army/baby_beetle_normal.png', 1);
        this.army1[i].load('red.png');
    }
    this.rootScene.attach(this.army1[0].icon);
    //this.army1[10].position.x = 300;
    //this.rootScene.attach(this.army1[10].arm);
    //this.army1[10].arm.start = ({from: 0, to: 23, loop: true, speed: 1});
    this.armyNum = -1;
    this.newarmy = -1;
    this.armyspeed = 1;
    this.armyFirst = 0;
    this.callarmy = 20;//10
    this.newarmytime = 350;
   
	
	this.practice = new Practice('practice/red_01.png', 'practice/red_iron.png', 'practice/gauge_icon_red_Iron.png', 1);
	this.practice.load();
	//this.practice.pic.position = {
	//    x: 200,
	//    y: 500
	//}
    this.practice.rotation = 0;
	this.practice.velocity;
    this.rootScene.attach(this.practice.icon1);
    this.rootScene.attach(this.practice.shadow);
	this.rootScene.attach(this.practice.pic);
    this.rootScene.attach(this.practice.spot);

	this.pic = new Victory();
    this.pic.load();
    this.pic.position = {
        x: 800,
        y: -900
    }
    
    

    //update of each objects
    for(var i = 0; i < 100; i++){
        this.army1[i].update(this.practice.position.x, this.practice.velocity.horizential);
    }
    this.gameMap.update(this.practice.position.x, this.practice.velocity.horizential, this.practice.righthandside, this.practice.lefthandside);
    this.enemycamp.update(this.gameMap.position.x);
    this.mycamp.update(this.gameMap.position.x);
    this.practice.update(this.gameMap.position.x);
    this.pic.update();



        //this.isStop = false;
        //this.isPlayed = false;

	/*    
	this.clock = new Framework.Sprite(define.imagePath + 'clock.png');
        this.clock.scale = 0.3;
        this.clock.position = {
            x: 0,
            y: 0
        };
	*/
	
	    
        //this.Hand = new Framework.Sprite(define.imagePath + 'secondHand.jpg'); 
       
	    var characterPosition;
        characterPosition = {x: 400, y: 500};
	   
        //this.freeze.sprite.start();
	/*
		this.firen = new Character(define.imagePath + 'firen.png', {position: characterPosition, run: {from: 20, to: 22}, beHit: {from:30, to: 35}, hit: {from: 10, to: 13}}); 
        this.freeze = new Character(define.imagePath + 'freeze.png', {position: characterPosition, scale: 1, run: {from: 29, to: 27}, beHit: {from:39, to: 35}, hit: {from: 19, to: 16}});
        
	
        this.clockCenter = new Framework.Scene();
        this.clockCenter.position = {
            x: -10.5 * this.clock.scale,
            y: 51 * this.clock.scale
        };

        this.clockCenterNeg = new Framework.Scene();
        this.clockCenterNeg.position = {
            x: -10.5 * this.clock.scale,
            y: 51 * this.clock.scale
        };

        this.secondHand.position = {
            x: 0,
            y: -100
        };

        this.wholeClock = new Framework.Scene();
        this.wholeClock.position = {
            x: Framework.Game.getCanvasWidth() / 2,
            y: Framework.Game.getCanvasHeight() / 2
        };


        this.secondHandRotationRate = 0.3;
        this.wholeClock.attach(this.clock);
        this.clockCenter.attach(this.secondHand);
        this.clockCenter.attach(this.firen.sprite);
        this.f.attach(this.freeze.sprite);
        this.wholeClock.attach(this.clockCenterNeg); 
        this.wholeClock.attach(this.clockCenter);                    
        this.rootScene.attach(this.wholeClock);
	*/
	

        //繪製Sprite的boundry (Debug用)
        //this.firen.sprite.isDrawBoundry = true;
        //this.clock.isDrawBoundry = true;
	
	
        //載入要被播放的音樂清單
        //資料夾內只提供mp3檔案, 其餘的音樂檔案, 請自行轉檔測試
       this.audio = new Framework.Audio({
            song2:{
                mp3: define.musicPath + 'YMCA Minions HD.mp3',
            },
            hit:{
                mp3: define.musicPath + 'kick2.mp3'
            },
            eat:{
                mp3: define.musicPath + 'Human Eating Peach.mp3'
            },
            beHit:{
                mp3: define.musicPath + 'hit.mp3'
            },
            buildinghit:{
                mp3: define.musicPath + 'Bale Elevator - Long.mp3'
            },
            win:{
                mp3: define.musicPath + 'win.mp3'
            },
            change:{
                mp3: define.musicPath + 'change.mp3'
            }
    
        });
    

        //播放時, 需要給name, 其餘參數可參考W3C
        this.audio.play({name: 'song2', loop: true});

	/*        
	this.rectPosition = { 
            x: Framework.Game.getCanvasWidth() / 2 - 130,
            y: Framework.Game.getCanvasHeight() / 2 - 90
        };
		
		this.position = {
			x: 100,
			y: 100
		}
		this.rotation = 0;
	*/
	},

   	initialize: function() {
        
                           
    },

    update: function () {
	var defeate1 = 0;
	var stop ;

	this.rootScene.update();     
	this.practice.update(this.gameMap.position.x);
    this.practice.spot.position.x = 245 + (this.practice.position.x - this.gameMap.mapleft) / 3000 * (690 - 245);
	this.enemycamp.update(this.gameMap.position.x);
    this.enemycamp.position.x = this.gameMap.position.x + 1300;
    this.enemycamp.position.y = 450;
    this.mycamp.update(this.gameMap.position.x);
    this.mycamp.position.x = this.gameMap.position.x - 1310;
	this.gameMap.update(this.practice.position.x, this.practice.velocity.horizential, this.practice.righthandside, this.practice.lefthandside);
    this.pic.update();

    //PRACTICE
    if(this.practice.changepara === 1 && this.practice.changeval === 100){
        this.rootScene.detach(this.practice.pic);
        this.rootScene.detach(this.practice.icon1);
        this.rootScene.attach(this.practice.picir);
        this.rootScene.attach(this.practice.icon2);
        this.practice.hitval = 100;
        this.practice.changepara = 0;
        this.practice.changeval= 0;
        this.practice.changestatus = 1;
    }
    if(this.practice.changestatus === 1){
        this.practice.changetime += 1;
        if(this.practice.changetime === 1800){
            this.rootScene.detach(this.practice.picir);
            this.rootScene.detach(this.practice.icon2);
            this.rootScene.attach(this.practice.pic);
            this.rootScene.attach(this.practice.icon1);
            this.practice.hitval = 30;
            this.practice.changestatus = 0;
        }
    }
    //hit-practice
    for(var j = this.enemyFirst; j <= this.enemyNum; j += 1){
            if((this.enemy1[j].position.x - this.practice.position.x <= 110) && (this.enemy1[j].position.x - this.practice.position.x > 0)){
                if(Math.random() >= 0.8  && (this.enemy1[j].hittime === this.enemy1[j].interval)){
                    this.enemy1[j].hit();
                    this.practice.beHit(this.enemy1[j].hitVal);
                    this.audio.play({name: 'beHit', loop: false});
                }
            }
    }

    if(this.practice.hitpara === 1){
        this.practicehit = 1;
        for(var j = this.enemyFirst; j <= this.enemyNum; j += 1){
            if((this.enemy1[j].position.x - this.practice.position.x <= 110) && (this.enemy1[j].position.x - this.practice.position.x > 0)){
                if(this.practicehit === 1 && this.practice.hittime === this.practice.interval){
                    console.log("beHit");
                    this.enemy1[j].beHit(this.practice.hitVal);
                    if(this.practice.changeval < 100){
                        this.practice.changeval+= 10;
                    }
                    this.practice.hit();
                    this.audio.play({name: 'hit', loop: false});
                }
            }
        }
        this.practicehit = 0;
    }
    for(var j = this.enemyFirst; j <= this.enemyNum; j += 1){
            if(this.enemy1[j].health <= 0){
                this.rootScene.detach(this.enemy1[j].ene);
                this.rootScene.detach(this.enemy1[j].ene);
                this.rootScene.detach(this.enemy1[j].spot);
                this.enemy1[j].position.x = this.enemycamp.position.x + 500;
                this.enemy1[j].position.x += this.enemyspeed;
                
                //this.enemyFirst += 1;
            }
        }
    
    

    //ENEMY 
    if(this.newenemy === 0){
        this.enemyup = 200 + Math.round(Math.random()*(299)+1) ;
    }
    //console.log(this.enemyup);
    this.newenemy += 1;
    if (this.newenemy >= this.enemyup) {
        this.enemyNum += 1;
        this.enemy1[this.enemyNum].load(this.enemycamp.position.x, 'gray.png');
        this.rootScene.attach(this.enemy1[this.enemyNum].shadow);
        this.rootScene.attach(this.enemy1[this.enemyNum].ene);
        this.rootScene.attach(this.enemy1[this.enemyNum].spot);
        //console.log("enemy" + this.enemyNum + this.enemy1[this.enemyNum].position.x);
        this.newenemy = 0;  
    }
    for(var j = this.enemyFirst; j <= this.enemyNum; j += 1){
        this.enemy1[j].update(this.practice.position.x, this.practice.velocity.horizential, this.practice.righthandside, this.practice.lefthandside);
        if(this.enemy1[j].position.x >= (this.mycamp.position.x + 250)){
            this.enemy1[j].position.x -= this.enemyspeed;
            this.enemy1[j].run();

            if((this.enemy1[j].position.x - this.practice.position.x <= 100) && (this.enemy1[j].position.x - this.practice.position.x > 0)){
                this.enemy1[j].position.x += this.enemyspeed;
            }
            this.enemy1[j].spot.position.x = 245 + (this.enemy1[j].position.x - this.gameMap.mapleft) / 3000 * (690 - 245)
        }
    }


    //ARMY
    if(this.newarmytime != 350){
        this.newarmytime += 1;
    }
    if(this.newarmy === 1 && this.callarmy >= 10 && this.newarmytime === 350){
        //console.log("armyNum: " + this.armyNum);
        this.armyNum += 1;
        this.army1[this.armyNum].load('red.png');
        this.army1[this.armyNum].position.x = this.mycamp.position.x;
        this.rootScene.attach(this.army1[this.armyNum].shadow);
        this.rootScene.attach(this.army1[this.armyNum].arm);
        this.rootScene.attach(this.army1[this.armyNum].spot);
        this.newarmy = 0;
        this.callarmy -= 10;
        this.newarmytime = 0;
    }
    

    //hit-army & enemy
    
    for(var k = this.armyFirst; k <= this.armyNum; k += 1){
        this.army1[k].update(this.practice.position.x, this.practice.velocity.horizential, this.practice.righthandside, this.practice.lefthandside);
        this.army1[k].spot.position.x = 245 + (this.army1[k].position.x - this.gameMap.mapleft) / 3000 * (690-245);

        if(this.army1[k].position.x <= (this.enemycamp.position.x - 250)){
                this.army1[k].position.x += this.armyspeed;
                this.army1[k].run();
        }

        for(var p = this.enemyFirst; (p <= this.enemyNum); p += 1){
            if((this.enemy1[p].position.x - this.army1[k].position.x <= 100) && (this.enemy1[p].position.x - this.army1[k].position.x > 0)){
                this.enemy1[p].position.x += this.enemyspeed;
                //console.log("this.enemy" + p + " " + this.enemy1[p].position.x);
                this.army1[k].position.x -= this.armyspeed;
            
                this.army1[k].idle();
            }
             
            var whofirst = Math.round(Math.random());
            if((this.enemy1[p].position.x - this.army1[k].position.x <= 110) && (this.enemy1[p].position.x - this.army1[k].position.x > 0) && (this.army1[k].hittime === this.army1[k].interval) && whofirst === 1){
                console.log("beHit");
                    this.army1[k].hit();
                    this.audio.play({name: 'beHit', loop: false});
                    this.enemy1[p].beHit(this.army1[k].hitVal);
                
            }
            if((this.enemy1[p].position.x - this.army1[k].position.x <= 110) && (this.enemy1[p].position.x - this.army1[k].position.x > 0) && (this.enemy1[p].hittime === this.enemy1[p].interval) && whofirst === 0){
                    this.enemy1[p].hit();
                    this.audio.play({name: 'beHit', loop: false});
                    this.army1[k].beHit(this.enemy1[p].hitVal);  
            }
            if((this.enemy1[p].position.x - this.army1[k].position.x <= 110) && (this.enemy1[p].position.x - this.army1[k].position.x > 0) && ((this.army1[k].hittime === this.army1[k].interval) || (this.enemy1[p].hittime === this.enemy1[p].interval))){
                console.log("beHit");
                var whofirst = Math.round(Math.random());
                if(whofirst === 1){
                    this.army1[k].hit();
                    this.audio.play({name: 'beHit', loop: false});
                    this.enemy1[p].beHit(this.army1[k].hitVal);
                }
                if(whofirst === 0){
                    this.enemy1[p].hit();
                    this.audio.play({name: 'beHit', loop: false});
                    this.army1[k].beHit(this.enemy1[p].hitVal);
                }
            }
            
            if(this.enemy1[p].health <= 0){
                this.enemy1[p].dead();
                this.rootScene.detach(this.enemy1[p].ene);
                this.rootScene.detach(this.enemy1[p].spot);
                this.enemy1[p].position.x = this.enemycamp.position.x + 500;
                this.enemy1[p].position.x += this.enemyspeed;
                //this.enemyFirst += 1;
            }
            if(this.army1[k].health <= 0){
                //console.log("army " + k + " position: " + this.army1[k].position.x);
                this.army1[k].dead();
                this.rootScene.detach(this.army1[k].arm);
                this.rootScene.detach(this.army1[k].spot);
                this.army1[k].position.x = this.mycamp.position.x - 500;
                //console.log(this.mycamp.position.x);
                this.army1[k].position.x -= this.armyspeed;
                //this.armyFirst += 1;
                
            }
        }
    }

    //BREAD
    this.newbread += 1;
    //console.log(this.newbread);
    //console.log(this.breadNum);
    if(this.newbread === this.breadup){
        this.breadNum += 1;
        this.bread[this.breadNum].position.x = 400 + Math.round(Math.random()*(399)+1);
        this.rootScene.attach(this.bread[this.breadNum].things);
        this.newbread = 0;
        this.breadup = 400 + Math.round(Math.random()*(99)+1)
    }
     for(var j = this.breadFirst; j <= this.breadNum; j += 1){
        this.bread[j].update(this.practice.position.x, this.practice.velocity.horizential, this.practice.righthandside, this.practice.lefthandside);
        if(this.bread[j].position.y < 550){
            this.bread[j].position.y += this.breadspeed;
        }
        this.bread[j].count += 1;

        if(this.bread[j].count === this.breadgone){
            this.rootScene.detach(this.bread[j].things);
            this.bread[j].position.y = 1000;
        }
        if(Math.abs(this.bread[j].position.x - this.practice.position.x) < 50 && Math.abs(this.bread[j].position.y - this.practice.position.y) < 50){
            this.rootScene.detach(this.bread[j].things);
            this.audio.play({name: 'eat', loop: false});
            this.bread[j].position.y = 1000;
            this.callarmy += 10;
        }
    }
    /*
    this.enemy1[1].position = {
        x: this.enemy1[1].position.x + Math.random()*10,
        y: this.enemy1[1].position.y + Math.random()*10
        }
    this.enemy1[1].position = {
        x: this.enemy1[1].position.x - Math.random()*10,
        y: this.enemy1[1].position.y - Math.random()*10
    }
    }*/

    //ENEMYCAMP
    if((this.enemycamp.position.x - this.practice.position.x <= 300) && (this.enemycamp.position.x - this.practice.position.x > 0) && this.practice.hitpara === 1){
        if(Math.random() >= 0.8){
            this.practice.hit();
            this.enemycamp.beHit(this.practice.hitVal);
            this.audio.play({name: 'buildinghit', loop: false});
            //console.log(this.enemycamp.health + " jjjj");
        }
    }
    for(var o = this.armyFirst; o <= this.armyNum; o++){
        if((this.enemycamp.position.x - this.army1[o].position.x <= 300) && (this.enemycamp.position.x - this.army1[o].position.x > 0)){
            if(Math.random() >= 0.8){
                this.army1[o].hit();
                this.audio.play({name: 'buildinghit', loop: false});
                this.enemycamp.beHit(this.army1[o].hitVal);
                console.log(this.enemycamp.health + " jjjj");
            }
        }
    }
    if(this.enemycamp.health <= 0){
        this.rootScene.detach(this.enemycamp.building);
        this.enemycamp.position.y = -1000;
    }

    //victory
    if(this.enemycamp.position.y === -1000) {
        this.pic.position.y = 400;
        this.enemycamp.position.y += 100;
        this.rootScene.attach(this.pic.victory);
        this.audio.play({name: 'win', loop: false});     
    }
    if(this.enemycamp.position.y === -900 && this.nextlevel === 1){
        this.audio.play({name: 'change', loop: false})
                this.audio.stopAll();

        Framework.Game.goToNextLevel();
    }
    

    //MYCAMP
    for(var o = this.enemyFirst; o <= this.enemyNum; o++){
        if((this.mycamp.position.x - this.enemy1[o].position.x >= -250)){
            if(Math.random() >= 0.8){
                this.enemy1[o].hit();
                this.mycamp.beHit(this.army1[o].hitVal);
                this.audio.play({name: 'buildinghit', loop: false});
                //console.log(this.mycamp.health + " jjjj");
            }
        }
    }
    if(this.mycamp.health <= 0){
        this.rootScene.detach(this.mycamp.building);
        this.mycamp.position.y = -1000;
    }

    //LOSS
    if(this.mycamp.position.y === -1000) {
        this.pic.position.y = 450;
        this.rootScene.attach(this.pic.loss);
    }
    
    if(this.practice.health <= 0 ){
        this.practice.dead();
        this.deadtime += 1;
    }
    if(this.deadtime === 60 && this.enemycamp.position.y != -1000){
        if(this.changestatus === 0){
            this.rootScene.detach(this.practice.pic);    
        }
        else{
            this.rootScene.detach(this.practice.picir);    
        }
        this.rootScene.detach(this.practice.spot);
        this.practice.position.x = this.mycamp.position.x;
        this.pic.position.y = 450;
        this.rootScene.attach(this.pic.loss);
        this.changestatus = 0;
    }
	
	
	/*
	var game = this;
        以下為當被攻擊時會停下來, 並且當被攻擊的動畫播放完時便繼續跑的Scenario
        if(this.firen.collide(this.freeze) && !this.isStop && !this.isPlayed) {
            this.isStop = true;
            this.isPlayed = true;
             //當碰攻擊時, 播放音效(可一次播放多首音樂)
            this.audio.play({name: 'kick'});
            this.firen.hit(function() {
                game.freeze.beHit(function() {
                    game.isStop = false;
                    game.freeze.run();
                });
                game.firen.run();
            });
        this.firen = new Character(define.imagePath + 'firen.png', {position: characterPosition, run: {from: 20, to: 22}, beHit: {from:30, to: 35}, hit: {from: 10, to: 13}}); 
        this.freeze = new Character(define.imagePath + 'freeze.png', {position: characterPosition, scale: 1, run: {from: 29, to: 27}, beHit: {from:39, to: 35}, hit: {from: 19, to: 16}});
        
        }
        else if(!this.firen.collide(this.freeze)){
            this.isPlayed = false;
            this.clockCenter.rotation += this.secondHandRotationRate;
            this.clockCenterNeg.rotation = -this.clockCenter.rotation;
        }
        else if(this.firen.collide(this.freeze) && !this.isStop)
        {
            this.clockCenter.rotation += this.secondHandRotationRate;
            this.clockCenterNeg.rotation = -this.clockCenter.rotation;
        }
        //以上為當被攻擊時會停下來, 並且當被撞到的動畫播放完時便繼續跑的Scenario


        this.isPlayHit = this.firen.collide(this.freeze)
	*/        

	
	
	
    },
	

    draw:function(parentCtx){
	
        this.rootScene.draw();
        if(this.practice.changestatus == 0 && this.practice.health > 0){
            this.practice.pic.draw(parentCtx);
        }
        else if(this.practice.changestatus == 1 && this.practice.health > 0){
            this.practice.picir.draw(parentCtx);   
        }
        
        if(this.mycamp.health > 0 && this.enemycamp.health > 0 && this.practice.health > 0){
            this.practice.draw(parentCtx);
            this.mycamp.draw(parentCtx, 300);
            this.enemycamp.draw(parentCtx, -300);
            for(var l = 0; l <= this.enemyNum; l++){
                this.enemy1[l].draw(parentCtx, 'gray');
            }
            
            for(var l = 0; l <= this.armyNum; l++){
                this.army1[l].draw(parentCtx, 'red');
            }   
        }
       

        parentCtx.font = '30pt bold';
        parentCtx.fillStyle = 'black';
        parentCtx.textBaseline = 'top';
        parentCtx.textAlign = 'center';
        parentCtx.fillText(this.callarmy, 140, 805, 50 );

        parentCtx.font = '27pt bold';
        parentCtx.fillStyle = 'white';
        parentCtx.textBaseline = 'top';
        parentCtx.textAlign = 'center';
        parentCtx.fillText('10', 300, 828, 50 );

        parentCtx.fillStyle = "black";
        parentCtx.globalAlpha = 0.5;
        parentCtx.fillRect(255, 735, 100, 95 - (this.newarmytime / 350 * 95));
        
	/*
        this.practice.drax(parentCtx);
        //可支援畫各種單純的圖形和字
        parentCtx.fillStyle = (this.secondHandRotationRate > 0)?'green':'red'; 
        parentCtx.fillRect(this.rectPosition.x , this.rectPosition.y, 260, 90);  
        parentCtx.font = '65pt bold';
        parentCtx.fillStyle = 'white';
        parentCtx.textBaseline = 'top';
        parentCtx.textAlign = 'center';
        parentCtx.fillText('Click Me', this.rectPosition.x + 130, this.rectPosition.y, 260 寬度);
    */
        
    },

	mousemove:function(e, list){
        console.log("X: "+e.x+" Y: "+e.y);
    },

    
    keyup:function(e, list){
        Framework.DebugInfo.Log.warning(e.key);
        this.practice.keyup(e, list);
        if(e.key === 'R'){
            this.newarmy = 0;
        }
        if(e.key === 'Enter')
            this.change = 0;
    },

    keydown:function(e, list){
        Framework.DebugInfo.Log.warning(e.key);
        this.practice.keydown(e, list);
        if(e.key === 'R'){
            this.newarmy = 1;
        }
        if(e.key === 'Enter'){
           this.nextlevel = 1;
        }
        if(e.key === 'F6'){
                    this.audio.stopAll();

            Framework.Game.goToLevel('level1');
        }
        if(e.key === 'F7'){
                    this.audio.stopAll();

            Framework.Game.goToLevel('menu');
        }
        if(e.key === '2'){
                    this.audio.stopAll();

            Framework.Game.goToLevel('level2');
        }
        
    
        
	
    },
	
    /*
    touchstart: function (e) {
        //為了要讓Mouse和Touch都有一樣的事件
        //又要減少Duplicated code, 故在Touch事件被觸發時, 去Trigger Mouse事件
        this.click({ x: e.touches[0].clientX, y: e.touches[0].clientY });
    },
    
    click: function (e) {  

        console.log(e.x, e.y);
        if (!this.rectPosition) {
            return;
        }  
        
        if(e.x >= this.rectPosition.x && e.x <= this.rectPosition.x + 260 && e.y >= this.rectPosition.y && e.y <= this.rectPosition.y + 90) {
            if(!this.isClockStop) {
                this.secondHandRotationRate = 0;
                this.isClockStop = true;
                //Audio可以一次暫停所有的音樂
                this.audio.pauseAll();
            } else {
                this.isClockStop = false;
                this.secondHandRotationRate = 0.3;
                 //Audio也可以針對一首歌進行操作(繼續播放)
                this.audio.resume('song2');
            }
        } else if(e.x >= this.clock.upperLeft.x && e.x <= this.clock.lowerRight.x && e.y >= this.clock.upperLeft.y && e.y <= this.clock.lowerRight.y) {
           //由於Click Me在太小的螢幕的情況下會蓋到Clock, 導致點擊Click Me時, 會回到前一個Level,
            //故使用else if, 並優先選擇Click Me會觸發的條件
            this.audio.stopAll();
            Framework.Game.goToPreviousLevel();            
            return;
        }
    },
	*/
});
